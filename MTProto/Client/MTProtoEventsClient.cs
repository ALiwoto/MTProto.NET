// <auto-generated>
//     Generated by the GenerateEvents.ps1 script.  DO NOT EDIT!
//     source: GenerateEvents.ps1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MTProto.Client.Events;

namespace MTProto.Client
{
    public class MTProtoEventsClient
    {
        #region events region
        public virtual EventManager<MTProtoClientBase, TL.UpdateMessageID> EventMessageID { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateUserTyping> EventUserTyping { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChatUserTyping> EventChatUserTyping { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChatParticipants> EventChatParticipants { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateUserStatus> EventUserStatus { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateUserName> EventUserName { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateNewAuthorization> EventNewAuthorization { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateNewEncryptedMessage> EventNewEncryptedMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateEncryptedChatTyping> EventEncryptedChatTyping { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateEncryption> EventEncryption { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateEncryptedMessagesRead> EventEncryptedMessagesRead { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChatParticipantAdd> EventChatParticipantAdd { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChatParticipantDelete> EventChatParticipantDelete { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDcOptions> EventDcOptions { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateNotifySettings> EventNotifySettings { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateServiceNotification> EventServiceNotification { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePrivacy> EventPrivacy { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateUserPhone> EventUserPhone { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadHistoryInbox> EventReadHistoryInbox { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadHistoryOutbox> EventReadHistoryOutbox { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadMessagesContents> EventReadMessagesContents { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelTooLong> EventChannelTooLong { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateNewChannelMessage> EventNewChannelMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadChannelInbox> EventReadChannelInbox { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDeleteChannelMessages> EventDeleteChannelMessages { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelMessageViews> EventChannelMessageViews { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChatParticipantAdmin> EventChatParticipantAdmin { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateNewStickerSet> EventNewStickerSet { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateStickerSetsOrder> EventStickerSetsOrder { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateStickerSets> EventStickerSets { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateSavedGifs> EventSavedGifs { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotInlineQuery> EventBotInlineQuery { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotInlineSend> EventBotInlineSend { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateEditChannelMessage> EventEditChannelMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotCallbackQuery> EventBotCallbackQuery { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateEditMessage> EventEditMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateInlineBotCallbackQuery> EventInlineBotCallbackQuery { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadChannelOutbox> EventReadChannelOutbox { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDraftMessage> EventDraftMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadFeaturedStickers> EventReadFeaturedStickers { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateRecentStickers> EventRecentStickers { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateConfig> EventConfig { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePtsChanged> EventPtsChanged { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelWebPage> EventChannelWebPage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDialogPinned> EventDialogPinned { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePinnedDialogs> EventPinnedDialogs { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotWebhookJSON> EventBotWebhookJSON { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotWebhookJSONQuery> EventBotWebhookJSONQuery { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotShippingQuery> EventBotShippingQuery { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotPrecheckoutQuery> EventBotPrecheckoutQuery { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePhoneCall> EventPhoneCall { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateLangPackTooLong> EventLangPackTooLong { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateLangPack> EventLangPack { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateFavedStickers> EventFavedStickers { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelReadMessagesContents> EventChannelReadMessagesContents { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateContactsReset> EventContactsReset { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelAvailableMessages> EventChannelAvailableMessages { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDialogUnreadMark> EventDialogUnreadMark { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateMessagePoll> EventMessagePoll { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChatDefaultBannedRights> EventChatDefaultBannedRights { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateFolderPeers> EventFolderPeers { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePeerSettings> EventPeerSettings { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePeerLocated> EventPeerLocated { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateNewScheduledMessage> EventNewScheduledMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDeleteScheduledMessages> EventDeleteScheduledMessages { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateTheme> EventTheme { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateGeoLiveViewed> EventGeoLiveViewed { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateLoginToken> EventLoginToken { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateMessagePollVote> EventMessagePollVote { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDialogFilter> EventDialogFilter { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDialogFilterOrder> EventDialogFilterOrder { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDialogFilters> EventDialogFilters { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePhoneCallSignalingData> EventPhoneCallSignalingData { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelMessageForwards> EventChannelMessageForwards { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadChannelDiscussionInbox> EventReadChannelDiscussionInbox { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadChannelDiscussionOutbox> EventReadChannelDiscussionOutbox { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePeerBlocked> EventPeerBlocked { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelUserTyping> EventChannelUserTyping { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePinnedMessages> EventPinnedMessages { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePinnedChannelMessages> EventPinnedChannelMessages { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChat> EventChat { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateGroupCallParticipants> EventGroupCallParticipants { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateGroupCall> EventGroupCall { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePeerHistoryTTL> EventPeerHistoryTTL { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChatParticipant> EventChatParticipant { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelParticipant> EventChannelParticipant { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotStopped> EventBotStopped { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateGroupCallConnection> EventGroupCallConnection { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotCommands> EventBotCommands { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdatePendingJoinRequests> EventPendingJoinRequests { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotChatInviteRequester> EventBotChatInviteRequester { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateMessageReactions> EventMessageReactions { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateAttachMenuBots> EventAttachMenuBots { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateWebViewResultSent> EventWebViewResultSent { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateBotMenuButton> EventBotMenuButton { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateSavedRingtones> EventSavedRingtones { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateTranscribedAudio> EventTranscribedAudio { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadFeaturedEmojiStickers> EventReadFeaturedEmojiStickers { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateUserEmojiStatus> EventUserEmojiStatus { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateRecentEmojiStatuses> EventRecentEmojiStatuses { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateRecentReactions> EventRecentReactions { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateMoveStickerSetToTop> EventMoveStickerSetToTop { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateMessageExtendedMedia> EventMessageExtendedMedia { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelPinnedTopic> EventChannelPinnedTopic { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannelPinnedTopics> EventChannelPinnedTopics { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateUser> EventUser { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateAutoSaveSettings> EventAutoSaveSettings { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateGroupInvitePrivacyForbidden> EventGroupInvitePrivacyForbidden { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateStory> EventStory { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateReadStories> EventReadStories { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateStoryID> EventStoryID { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateStoriesStealthMode> EventStoriesStealthMode { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateSentStoryReaction> EventSentStoryReaction { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateChannel> EventChannel { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateWebPage> EventWebPage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateDeleteMessages> EventDeleteMessages { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateNewMessage> EventNewMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateShortSentMessage> EventShortSentMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateShortChatMessage> EventShortChatMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateShortMessage> EventShortMessage { get; set; }
        public virtual EventManager<MTProtoClientBase, TL.UpdateShort> EventShort { get; set; }

        #endregion

        public virtual async Task HandleValidEvent(MTProtoClientBase client, TL.IObject arg)
        {
            switch (arg)
            {
                case TL.UpdateMessageID update:
                    await (EventMessageID?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateUserTyping update:
                    await (EventUserTyping?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChatUserTyping update:
                    await (EventChatUserTyping?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChatParticipants update:
                    await (EventChatParticipants?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateUserStatus update:
                    await (EventUserStatus?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateUserName update:
                    await (EventUserName?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateNewAuthorization update:
                    await (EventNewAuthorization?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateNewEncryptedMessage update:
                    await (EventNewEncryptedMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateEncryptedChatTyping update:
                    await (EventEncryptedChatTyping?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateEncryption update:
                    await (EventEncryption?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateEncryptedMessagesRead update:
                    await (EventEncryptedMessagesRead?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChatParticipantAdd update:
                    await (EventChatParticipantAdd?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChatParticipantDelete update:
                    await (EventChatParticipantDelete?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDcOptions update:
                    await (EventDcOptions?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateNotifySettings update:
                    await (EventNotifySettings?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateServiceNotification update:
                    await (EventServiceNotification?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePrivacy update:
                    await (EventPrivacy?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateUserPhone update:
                    await (EventUserPhone?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadHistoryInbox update:
                    await (EventReadHistoryInbox?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadHistoryOutbox update:
                    await (EventReadHistoryOutbox?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadMessagesContents update:
                    await (EventReadMessagesContents?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelTooLong update:
                    await (EventChannelTooLong?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateNewChannelMessage update:
                    await (EventNewChannelMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadChannelInbox update:
                    await (EventReadChannelInbox?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDeleteChannelMessages update:
                    await (EventDeleteChannelMessages?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelMessageViews update:
                    await (EventChannelMessageViews?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChatParticipantAdmin update:
                    await (EventChatParticipantAdmin?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateNewStickerSet update:
                    await (EventNewStickerSet?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateStickerSetsOrder update:
                    await (EventStickerSetsOrder?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateStickerSets update:
                    await (EventStickerSets?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateSavedGifs update:
                    await (EventSavedGifs?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotInlineQuery update:
                    await (EventBotInlineQuery?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotInlineSend update:
                    await (EventBotInlineSend?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateEditChannelMessage update:
                    await (EventEditChannelMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotCallbackQuery update:
                    await (EventBotCallbackQuery?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateEditMessage update:
                    await (EventEditMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateInlineBotCallbackQuery update:
                    await (EventInlineBotCallbackQuery?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadChannelOutbox update:
                    await (EventReadChannelOutbox?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDraftMessage update:
                    await (EventDraftMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadFeaturedStickers update:
                    await (EventReadFeaturedStickers?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateRecentStickers update:
                    await (EventRecentStickers?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateConfig update:
                    await (EventConfig?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePtsChanged update:
                    await (EventPtsChanged?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelWebPage update:
                    await (EventChannelWebPage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDialogPinned update:
                    await (EventDialogPinned?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePinnedDialogs update:
                    await (EventPinnedDialogs?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotWebhookJSON update:
                    await (EventBotWebhookJSON?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotWebhookJSONQuery update:
                    await (EventBotWebhookJSONQuery?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotShippingQuery update:
                    await (EventBotShippingQuery?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotPrecheckoutQuery update:
                    await (EventBotPrecheckoutQuery?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePhoneCall update:
                    await (EventPhoneCall?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateLangPackTooLong update:
                    await (EventLangPackTooLong?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateLangPack update:
                    await (EventLangPack?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateFavedStickers update:
                    await (EventFavedStickers?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelReadMessagesContents update:
                    await (EventChannelReadMessagesContents?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateContactsReset update:
                    await (EventContactsReset?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelAvailableMessages update:
                    await (EventChannelAvailableMessages?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDialogUnreadMark update:
                    await (EventDialogUnreadMark?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateMessagePoll update:
                    await (EventMessagePoll?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChatDefaultBannedRights update:
                    await (EventChatDefaultBannedRights?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateFolderPeers update:
                    await (EventFolderPeers?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePeerSettings update:
                    await (EventPeerSettings?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePeerLocated update:
                    await (EventPeerLocated?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateNewScheduledMessage update:
                    await (EventNewScheduledMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDeleteScheduledMessages update:
                    await (EventDeleteScheduledMessages?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateTheme update:
                    await (EventTheme?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateGeoLiveViewed update:
                    await (EventGeoLiveViewed?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateLoginToken update:
                    await (EventLoginToken?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateMessagePollVote update:
                    await (EventMessagePollVote?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDialogFilter update:
                    await (EventDialogFilter?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDialogFilterOrder update:
                    await (EventDialogFilterOrder?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDialogFilters update:
                    await (EventDialogFilters?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePhoneCallSignalingData update:
                    await (EventPhoneCallSignalingData?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelMessageForwards update:
                    await (EventChannelMessageForwards?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadChannelDiscussionInbox update:
                    await (EventReadChannelDiscussionInbox?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadChannelDiscussionOutbox update:
                    await (EventReadChannelDiscussionOutbox?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePeerBlocked update:
                    await (EventPeerBlocked?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelUserTyping update:
                    await (EventChannelUserTyping?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePinnedMessages update:
                    await (EventPinnedMessages?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePinnedChannelMessages update:
                    await (EventPinnedChannelMessages?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChat update:
                    await (EventChat?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateGroupCallParticipants update:
                    await (EventGroupCallParticipants?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateGroupCall update:
                    await (EventGroupCall?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePeerHistoryTTL update:
                    await (EventPeerHistoryTTL?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChatParticipant update:
                    await (EventChatParticipant?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelParticipant update:
                    await (EventChannelParticipant?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotStopped update:
                    await (EventBotStopped?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateGroupCallConnection update:
                    await (EventGroupCallConnection?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotCommands update:
                    await (EventBotCommands?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdatePendingJoinRequests update:
                    await (EventPendingJoinRequests?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotChatInviteRequester update:
                    await (EventBotChatInviteRequester?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateMessageReactions update:
                    await (EventMessageReactions?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateAttachMenuBots update:
                    await (EventAttachMenuBots?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateWebViewResultSent update:
                    await (EventWebViewResultSent?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateBotMenuButton update:
                    await (EventBotMenuButton?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateSavedRingtones update:
                    await (EventSavedRingtones?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateTranscribedAudio update:
                    await (EventTranscribedAudio?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadFeaturedEmojiStickers update:
                    await (EventReadFeaturedEmojiStickers?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateUserEmojiStatus update:
                    await (EventUserEmojiStatus?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateRecentEmojiStatuses update:
                    await (EventRecentEmojiStatuses?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateRecentReactions update:
                    await (EventRecentReactions?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateMoveStickerSetToTop update:
                    await (EventMoveStickerSetToTop?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateMessageExtendedMedia update:
                    await (EventMessageExtendedMedia?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelPinnedTopic update:
                    await (EventChannelPinnedTopic?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannelPinnedTopics update:
                    await (EventChannelPinnedTopics?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateUser update:
                    await (EventUser?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateAutoSaveSettings update:
                    await (EventAutoSaveSettings?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateGroupInvitePrivacyForbidden update:
                    await (EventGroupInvitePrivacyForbidden?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateStory update:
                    await (EventStory?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateReadStories update:
                    await (EventReadStories?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateStoryID update:
                    await (EventStoryID?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateStoriesStealthMode update:
                    await (EventStoriesStealthMode?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateSentStoryReaction update:
                    await (EventSentStoryReaction?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateChannel update:
                    await (EventChannel?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateWebPage update:
                    await (EventWebPage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateDeleteMessages update:
                    await (EventDeleteMessages?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateNewMessage update:
                    await (EventNewMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateShortSentMessage update:
                    await (EventShortSentMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateShortChatMessage update:
                    await (EventShortChatMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateShortMessage update:
                    await (EventShortMessage?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
                case TL.UpdateShort update:
                    await (EventShort?.InvokeHandlers(client, update) ?? Task.CompletedTask);
                    break;
            }
        }
    }
}

